#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# copyright: 2020-2022, Frederico Martins
# author: Frederico Martins <http://github.com/fscm>
# license: SPDX-License-Identifier: MIT

"""iana-etc.

Downloads all the gists from a github user.

This tool will try to fetch all of the gists of a github user.

A simple example of how to use this tool:
    gists-download -u username
"""


import os
import subprocess
import sys
from argparse import ArgumentParser
from io import StringIO
from json import load
from pathlib import Path
from shutil import which
from urllib.request import urlopen
from urllib.error import HTTPError, URLError
#from ssl import SSLContext


__author__: str = 'Frederico Martins'
__license__: str = 'MIT'
__project__: str = Path(__file__).stem
__version__: str = '0.1.0'

BASE_URL: str = 'https://api.github.com/users'
GISTS_PER_PAGE = 30
#SSL_CONTEXT: SSLContext = SSLContext(protocol=None)


def check_program(name: str) -> bool:
    """Checks if a program is install and accessible from the PATH.

    Args:
        name (str): The program name.

    Returns:
        bool: True if the program is installed and can be find in the
            PATH. False otherwise.
    """
    return which(name) is not None


def main() -> None:
    """main method."""
    parser = ArgumentParser(
        prog=__project__, add_help=True, allow_abbrev=False)
    parser.add_argument(
        '-d', '--directory', action='store', nargs='?', type=str, help='output dir')
    parser.add_argument(
        '-q', '--quiet', action='store_true', help='quiet mode')
    parser.add_argument(
        '-u', '--username', action='store', nargs='?', type=str, required=True, help='username')
    parser.add_argument(
        '-v', '--version', action='version', version=__version__)
    args = parser.parse_args()
    username = args.username
    output_dir = (Path(args.directory) if args.directory else Path.cwd()).joinpath(username)
    if args.quiet:
        sys.stdout = open(os.devnull, 'a')
        #sys.stderr = open(os.devnull, 'a')

    print(f'{__project__} version {__version__}\n'
        f'by {__author__} under {__license__} license\n')

    if not check_program('git'):
        print('[Errno 99] Program not found: git', file=sys.stderr)
        sys.exit(99)

    profile_url = f'{BASE_URL}/{username}'
    gists_url = f'{BASE_URL}/{username}/gists?per_page={GISTS_PER_PAGE}'

    print(f'Fetching gists for user {username}...')

    try:
        #req = urlopen(profile_url, context=SSL_CONTEXT)
        req = urlopen(profile_url)
    except HTTPError:
        print(f'[Errno 10] Invalid response for: "{profile_url}"', file=sys.stderr)
        sys.exit(10)
    except URLError as e:
        print(f'[Errno 11] URLError: {e}', file=sys.stderr)
        sys.exit(11)

    try:
        output_dir.mkdir(parents=True, exist_ok=True)
    except FileExistsError as e:
        print(e, file=sys.stderr)
        sys.exit(17)

    public_gists = load(StringIO(req.read().decode())).get('public_gists', 0)
    pages = -1 * (-public_gists // GISTS_PER_PAGE)  # ceildiv

    for page in range(pages):
        try:
            #req = urlopen(f'{gists_url}&page={page+1}', context=SSL_CONTEXT)
            req = urlopen(f'{gists_url}&page={page+1}')
        except HTTPError:
            print(
                f'[Errno 20] Invalid response for: "{gists_url}&page={page+1}"',
                file=sys.stderr)
            sys.exit(20)

        data = load(StringIO(req.read().decode()))

        for gist in data:
            gist_id = gist['id']
            gist_output = str(output_dir.joinpath(gist_id))
            gist_git_pull_url = gist['git_pull_url']
            print(f'    {gist_id}')
            with open(f'{gist_output}.txt', 'w') as f:
                f.write(f'{gist["description"]}\n')
            if Path(gist_output).exists():
                try:
                    _ = subprocess.run(
                        ['git', '-C', gist_output, 'pull'],
                        stdout=subprocess.DEVNULL,
                        stderr=subprocess.DEVNULL,
                        check=True)
                except subprocess.CalledProcessError:
                    print(
                        f'[Errno 30] Unable to update: "{gist_git_pull_url}"',
                        file=sys.stderr)
            else:
                try:
                    _ = subprocess.run(
                        ['git', 'clone', gist_git_pull_url, gist_output],
                        stdout=subprocess.DEVNULL,
                        stderr=subprocess.DEVNULL,
                        check=True)
                except subprocess.CalledProcessError:
                    print(
                        f'[Errno 40] Unable to clone: "{gist_git_pull_url}"',
                        file=sys.stderr)

    print(f'All done.')


if __name__ == '__main__':
    sys.exit(main())
